// <auto-generated />
using System;
using FindR.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FindR.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210311154440_housing_table")]
    partial class housing_table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FindR.Models.Address", b =>
                {
                    b.Property<int>("Address_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zone")
                        .HasColumnType("int");

                    b.HasKey("Address_Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Address_Id = 1,
                            City = "Alba-Iulia",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 2,
                            City = "Alba-Iulia",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 3,
                            City = "Alexandria",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 4,
                            City = "Alexandria",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 5,
                            City = "Arad",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 6,
                            City = "Arad",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 7,
                            City = "Bacau",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 8,
                            City = "Bacau",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 9,
                            City = "Baia Mare",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 10,
                            City = "Baia Mare",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 11,
                            City = "Bistrita",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 12,
                            City = "Bistrita",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 13,
                            City = "Botosani",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 14,
                            City = "Botosani",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 15,
                            City = "Brasov",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 16,
                            City = "Brasov",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 17,
                            City = "Braila",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 18,
                            City = "Braila",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 19,
                            City = "Buzau",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 20,
                            City = "Buzau",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 21,
                            City = "Calarasi",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 22,
                            City = "Calarasi",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 23,
                            City = "Cluj-Napoca",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 24,
                            City = "Cluj-Napoca",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 25,
                            City = "Constanta",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 26,
                            City = "Constanta",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 27,
                            City = "Craiova",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 28,
                            City = "Craiova",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 29,
                            City = "Deva",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 30,
                            City = "Deva",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 31,
                            City = "Drobeta-Turnu-Severin",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 32,
                            City = "Drobeta-Turnu-Severin",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 33,
                            City = "Focsani",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 34,
                            City = "Focsani",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 35,
                            City = "Galati",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 36,
                            City = "Galati",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 37,
                            City = "Giurgiu",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 38,
                            City = "Giurgiu",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 39,
                            City = "Iasi",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 40,
                            City = "Iasi",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 41,
                            City = "Miercurea-Ciuc",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 42,
                            City = "Miercurea-Ciuc",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 43,
                            City = "Oradea",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 44,
                            City = "Oradea",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 45,
                            City = "Piatra Neamt",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 46,
                            City = "Piatra Neamt",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 47,
                            City = "Pitesti",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 48,
                            City = "Pitesti",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 49,
                            City = "Ploiesti",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 50,
                            City = "Ploiesti",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 51,
                            City = "Ramnicu Valcea",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 52,
                            City = "Ramnicu Valcea",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 53,
                            City = "Resita",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 54,
                            City = "Resita",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 55,
                            City = "Satu Mare",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 56,
                            City = "Satu Mare",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 57,
                            City = "Sfantu Gheorghe",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 58,
                            City = "Sfantu Gheorghe",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 59,
                            City = "Sibiu",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 60,
                            City = "Sibiu",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 61,
                            City = "Slatina",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 62,
                            City = "Slatina",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 63,
                            City = "Slobozia",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 64,
                            City = "Slobozia",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 65,
                            City = "Suceava",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 66,
                            City = "Suceava",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 67,
                            City = "Targoviste",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 68,
                            City = "Targoviste",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 69,
                            City = "Targu Jiu",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 70,
                            City = "Targu Jiu",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 71,
                            City = "Targu Mures",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 72,
                            City = "Targu Mures",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 73,
                            City = "Timisoara",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 74,
                            City = "Timisoara",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 75,
                            City = "Tulcea",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 76,
                            City = "Tulcea",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 77,
                            City = "Vaslui",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 78,
                            City = "Vaslui",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 79,
                            City = "Zalau",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 80,
                            City = "Zalau",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 81,
                            City = "Bucuresti, Sector1",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 82,
                            City = "Bucuresti, Sector2",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 83,
                            City = "Bucuresti, Sector3",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 84,
                            City = "Bucuresti, Sector4",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 85,
                            City = "Bucuresti, Sector5",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 86,
                            City = "Bucuresti, Sector6",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 87,
                            City = "Bucuresti",
                            Country = "Romania",
                            Zone = 1
                        });
                });

            modelBuilder.Entity("FindR.Models.Advertisement", b =>
                {
                    b.Property<int>("Advertisement_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdvertisementId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Housing_Id")
                        .HasColumnType("int");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Advertisement_Id");

                    b.HasIndex("Housing_Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("FindR.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdressPersonalAddress_Id")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AttendsTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdressPersonalAddress_Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FindR.Models.CompleteAddress", b =>
                {
                    b.Property<int>("CompleteAddress_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompleteAddressId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompleteAddress_Id");

                    b.HasIndex("AddressId");

                    b.ToTable("CompleteAddresses");
                });

            modelBuilder.Entity("FindR.Models.Housing", b =>
                {
                    b.Property<int>("Housing_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HousingId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FullAddressCompleteAddress_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("bit");

                    b.Property<int>("NoOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Housing_Id");

                    b.HasIndex("FullAddressCompleteAddress_Id");

                    b.ToTable("Housings");
                });

            modelBuilder.Entity("FindR.Models.PersonalAddress", b =>
                {
                    b.Property<int>("PersonalAddress_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PersonalAddressId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Address_Id")
                        .HasColumnType("int");

                    b.HasKey("PersonalAddress_Id");

                    b.HasIndex("Address_Id");

                    b.ToTable("PersonalAddresses");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FindR.Models.Advertisement", b =>
                {
                    b.HasOne("FindR.Models.Housing", "Housing")
                        .WithMany()
                        .HasForeignKey("Housing_Id");

                    b.HasOne("FindR.Models.ApplicationUser", "Profile")
                        .WithMany("Advertisements")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Housing");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("FindR.Models.ApplicationUser", b =>
                {
                    b.HasOne("FindR.Models.PersonalAddress", "Adress")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("AdressPersonalAddress_Id");

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("FindR.Models.CompleteAddress", b =>
                {
                    b.HasOne("FindR.Models.Address", "Address")
                        .WithMany("CompleteAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("FindR.Models.Housing", b =>
                {
                    b.HasOne("FindR.Models.CompleteAddress", "FullAddress")
                        .WithMany()
                        .HasForeignKey("FullAddressCompleteAddress_Id");

                    b.Navigation("FullAddress");
                });

            modelBuilder.Entity("FindR.Models.PersonalAddress", b =>
                {
                    b.HasOne("FindR.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Address_Id");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FindR.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FindR.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindR.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FindR.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FindR.Models.Address", b =>
                {
                    b.Navigation("CompleteAddresses");
                });

            modelBuilder.Entity("FindR.Models.ApplicationUser", b =>
                {
                    b.Navigation("Advertisements");
                });

            modelBuilder.Entity("FindR.Models.PersonalAddress", b =>
                {
                    b.Navigation("ApplicationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
